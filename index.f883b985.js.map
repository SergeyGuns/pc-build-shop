{"mappings":"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","sources":["<anon>","src/js/cursor-pointer.js"],"sourcesContent":["(()=>{\n    const MAIN_COLORS = [\n        \"rgba(255,231,1,1)\",\n        \"rgba(154,21,236,1)\"\n    ];\n    if (document.documentElement.clientWidth < 1024) return;\n    const canvas = document.querySelector(\".cursor-pointer\");\n    if (canvas === null) return;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = window.innerHeight;\n    console.log(ctx);\n    let gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n    gradient.addColorStop(0, MAIN_COLORS[0]);\n    gradient.addColorStop(0.5, MAIN_COLORS[0]);\n    gradient.addColorStop(1, MAIN_COLORS[1]);\n    ctx.fillStyle = gradient;\n    ctx.globalAlpha = .5;\n    class Particle {\n        constructor(effect){\n            this.effect = effect;\n            this.radius = 0.3;\n            this.minRadius = this.radius;\n            this.maxRadius = Math.random() * 20;\n            this.x = this.radius + Math.random() * (this.effect.width - this.radius * 2);\n            this.y = this.radius + Math.random() * (this.effect.height - this.radius * 2);\n            this.vx = Math.random() * 0.2 - 0.1;\n            this.vy = Math.random() * 0.2 - 0.1;\n        }\n        draw(context) {\n            if (this.radius > 0.4) {\n                context.fillStyle = gradient;\n                context.beginPath();\n                context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n                context.fill();\n                // context.stroke();\n                context.fillStyle = \"transparent\";\n                context.beginPath();\n                context.arc(this.x - this.radius * 0.2, this.y - this.radius * 0.3, this.radius * 0.6, 0, Math.PI * 2);\n                context.fill();\n            }\n        }\n        update() {\n            const dx = this.x - this.effect.mouse.x;\n            const dy = this.y - this.effect.mouse.y;\n            const distance = Math.hypot(dx, dy);\n            if (distance < this.effect.mouse.radius && this.radius < this.maxRadius) this.radius += 3;\n            if (this.radius > this.minRadius) this.radius -= 0.05;\n            this.x += this.vx;\n            this.y += this.vy;\n            if (this.x < this.radius) {\n                this.x = this.radius;\n                this.vx *= -1;\n            } else if (this.x > this.effect.width - this.radius) {\n                this.x = this.effect.width - this.radius;\n                this.vx *= -1;\n            }\n            if (this.y < this.radius) {\n                this.y = this.radius;\n                this.vy *= -1;\n            } else if (this.y > this.effect.height - this.radius) {\n                this.y = this.effect.height - this.radius;\n                this.vy *= -1;\n            }\n        }\n        reset() {\n            this.x = this.radius + Math.random() * (this.effect.width - this.radius * 2);\n            this.y = this.radius + Math.random() * (this.effect.height - this.radius * 2);\n            this.radius = this.minRadius;\n        }\n    }\n    class Effect {\n        constructor(canvas, context){\n            this.canvas = canvas;\n            this.context = context;\n            this.width = this.canvas.width;\n            this.height = this.canvas.height;\n            this.particles = [];\n            this.numberOfParticles = 1000;\n            this.createParticles();\n            this.mouse = {\n                x: 0,\n                y: 0,\n                radius: 20\n            };\n            window.addEventListener(\"resize\", (e)=>{\n                this.resize(e.target.window.innerWidth, e.target.window.innerHeight);\n            });\n            window.addEventListener(\"mousemove\", (e)=>{\n                this.mouse.x = e.x;\n                this.mouse.y = e.y;\n            });\n        }\n        createParticles() {\n            for(let i = 0; i < this.numberOfParticles; i++)this.particles.push(new Particle(this));\n        }\n        handleParticles(context) {\n            //this.connectParticles(context);\n            this.particles.forEach((particle)=>{\n                particle.draw(context);\n                particle.update();\n            });\n        }\n        connectParticles(context) {\n            const maxDistance = 80;\n            for(let a = 0; a < this.particles.length; a++)for(let b = a; b < this.particles.length; b++){\n                const dx = this.particles[a].x - this.particles[b].x;\n                const dy = this.particles[a].y - this.particles[b].y;\n                const distance = Math.hypot(dx, dy);\n                if (distance < maxDistance) {\n                    context.save();\n                    const opacity = 1 - distance / maxDistance;\n                    context.globalAlpha = opacity;\n                    context.beginPath();\n                    context.moveTo(this.particles[a].x, this.particles[a].y);\n                    context.lineTo(this.particles[b].x, this.particles[b].y);\n                    context.stroke();\n                    context.restore();\n                }\n            }\n        }\n        resize(width, height) {\n            this.canvas.width = width;\n            this.canvas.height = height;\n            this.width = width;\n            this.height = height;\n            gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n            gradient.addColorStop(0, MAIN_COLORS[0]);\n            gradient.addColorStop(0.5, MAIN_COLORS[1]);\n            gradient.addColorStop(1, MAIN_COLORS[2]);\n            this.context.fillStyle = gradient;\n            this.particles.forEach((particle)=>{\n                particle.reset();\n            });\n        }\n    }\n    const effect = new Effect(canvas, ctx);\n    function animate() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        effect.handleParticles(ctx);\n        requestAnimationFrame(animate);\n    }\n    animate();\n})();\n\n//# sourceMappingURL=index.f883b985.js.map\n",";(()=>{\r\n    const MAIN_COLORS = [ 'rgba(255,231,1,1)', 'rgba(154,21,236,1)']\r\nif(document.documentElement.clientWidth < 1024) return;\r\nconst canvas = document.querySelector('.cursor-pointer');\r\nif (canvas === null) return;\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = document.documentElement.clientWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\nconsole.log(ctx);\r\nlet gradient = ctx.createLinearGradient(0,0,canvas.width, canvas.height);\r\ngradient.addColorStop(0, MAIN_COLORS[0]);\r\ngradient.addColorStop(0.5, MAIN_COLORS[0]);\r\ngradient.addColorStop(1, MAIN_COLORS[1]);\r\nctx.fillStyle = gradient;\r\nctx.globalAlpha = .5;\r\n\r\nclass Particle {\r\n    constructor(effect){\r\n        this.effect = effect;\r\n        this.radius = 0.3;\r\n        this.minRadius = this.radius;\r\n        this.maxRadius = Math.random() * 20;\r\n        this.x = this.radius + Math.random() * (this.effect.width - this.radius * 2);\r\n        this.y = this.radius + Math.random() * (this.effect.height - this.radius * 2);\r\n        this.vx = Math.random() * 0.2 - 0.1;\r\n        this.vy = Math.random() * 0.2 - 0.1;\r\n    }\r\n    draw(context){\r\n        if (this.radius > 0.4){\r\n            context.fillStyle = gradient;\r\n            context.beginPath();\r\n            context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n            context.fill();\r\n            // context.stroke();\r\n\r\n            context.fillStyle = 'transparent';\r\n            context.beginPath();\r\n            context.arc(this.x - this.radius * 0.2, this.y - this.radius * 0.3, this.radius * 0.6, 0, Math.PI * 2);\r\n            context.fill();\r\n        }\r\n\r\n    }\r\n    update(){\r\n            const dx = this.x - this.effect.mouse.x;\r\n            const dy = this.y - this.effect.mouse.y;\r\n            const distance = Math.hypot(dx, dy);\r\n             if (distance < this.effect.mouse.radius && this.radius < this.maxRadius){\r\n                this.radius += 3;\r\n            }\r\n        if (this.radius > this.minRadius) this.radius -= 0.05;\r\n\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n\r\n        if (this.x < this.radius){\r\n            this.x = this.radius;\r\n            this.vx *= -1;\r\n        } else if (this.x > this.effect.width - this.radius){\r\n            this.x = this.effect.width - this.radius;\r\n            this.vx *= -1;\r\n        }\r\n        if (this.y < this.radius){\r\n            this.y = this.radius;\r\n            this.vy *= -1;\r\n        } else if (this.y > this.effect.height - this.radius){\r\n            this.y = this.effect.height - this.radius;\r\n            this.vy *= -1;\r\n        }\r\n    }\r\n    reset(){\r\n        this.x = this.radius + Math.random() * (this.effect.width - this.radius * 2);\r\n        this.y = this.radius + Math.random() * (this.effect.height - this.radius * 2);\r\n        this.radius = this.minRadius;\r\n    }\r\n}\r\n\r\nclass Effect {\r\n    constructor(canvas, context){\r\n        this.canvas = canvas;\r\n        this.context = context;\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.particles = [];\r\n        this.numberOfParticles = 1000;\r\n        this.createParticles();\r\n\r\n        this.mouse = {\r\n            x: 0,\r\n            y: 0,\r\n            radius: 20\r\n        }\r\n\r\n        window.addEventListener('resize', e => {\r\n            this.resize(e.target.window.innerWidth, e.target.window.innerHeight);\r\n        });\r\n        window.addEventListener('mousemove', e => {\r\n                this.mouse.x = e.x;\r\n                this.mouse.y = e.y;\r\n        });\r\n    }\r\n    createParticles(){\r\n        for (let i = 0; i < this.numberOfParticles; i++){\r\n            this.particles.push(new Particle(this));\r\n        }\r\n    }\r\n    handleParticles(context){\r\n        //this.connectParticles(context);\r\n        this.particles.forEach(particle => {\r\n            particle.draw(context);\r\n            particle.update();\r\n        });\r\n    }\r\n    connectParticles(context){\r\n        const maxDistance = 80;\r\n        for (let a = 0; a < this.particles.length; a++){\r\n            for (let b = a; b < this.particles.length; b++){\r\n                const dx = this.particles[a].x - this.particles[b].x;\r\n                const dy = this.particles[a].y - this.particles[b].y;\r\n                const distance = Math.hypot(dx, dy);\r\n                if (distance < maxDistance){\r\n                    context.save();\r\n                    const opacity = 1 - (distance/maxDistance);\r\n                    context.globalAlpha = opacity;\r\n                    context.beginPath();\r\n                    context.moveTo(this.particles[a].x, this.particles[a].y);\r\n                    context.lineTo(this.particles[b].x, this.particles[b].y);\r\n                    context.stroke();\r\n                    context.restore();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    resize(width, height){\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.width = width;\r\n        this.height = height;\r\n        gradient = ctx.createLinearGradient(0,0,canvas.width, canvas.height);\r\ngradient.addColorStop(0, MAIN_COLORS[0]);\r\ngradient.addColorStop(0.5, MAIN_COLORS[1]);\r\ngradient.addColorStop(1, MAIN_COLORS[2]);\r\n        this.context.fillStyle = gradient;\r\n        this.particles.forEach(particle => {\r\n            particle.reset();\r\n        });\r\n    }\r\n}\r\nconst effect = new Effect(canvas, ctx);\r\n\r\nfunction animate(){\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    effect.handleParticles(ctx);\r\n    requestAnimationFrame(animate);\r\n}\r\nanimate();\r\n})();"],"names":["document","documentElement","clientWidth","canvas","querySelector","ctx","getContext","width","height","window","innerHeight","console","log","gradient","createLinearGradient","addColorStop","fillStyle","globalAlpha","Particle","constructor","effect","radius","minRadius","maxRadius","Math","random","x","y","vx","vy","draw","context","beginPath","arc","PI","fill","update","dx","mouse","dy","hypot","reset","particles","numberOfParticles","createParticles","addEventListener","e","resize","target","innerWidth","i","push","handleParticles","forEach","particle","connectParticles","a","length","b","distance","save","opacity","moveTo","lineTo","stroke","restore","MAIN_COLORS","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.f883b985.js.map"}